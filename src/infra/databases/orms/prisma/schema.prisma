// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  ADMIN
  USER
}

model Users {
  id            Int             @id @default(autoincrement())
  uuid          String          @unique() @default(uuid()) @db.Uuid()
  name          String
  email         String
  password      String
  photo         String?         @db.VarChar(255)
  role          RoleEnum        @default(USER)
  createdAt     DateTime        @default(now()) @map("created_at")
  isActive      Boolean         @default(true) @map("is_active")
  updatedAt     DateTime        @updatedAt() @map("updated_at")
  Localizations Localizations[]
  Warning       Warning[]
  Rating        Rating[]

  @@map("users")
}

model Localizations {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String   @db.VarChar(255)
  longitude   Decimal  @map("longitude") @db.Decimal()
  latitude    Decimal  @map("latitude") @db.Decimal()
  isIncident  Boolean  @default(false) @map("is_incident")
  user        Users    @relation(fields: [userId], references: [id])
  userId      Int      @map("user_id")
  Warning     Warning?

  @@map("localizations")
}

model Warning {
  id             Int           @id @default(autoincrement())
  title          String        @db.VarChar(50)
  description    String        @db.VarChar(255)
  localization   Localizations @relation(fields: [localizationId], references: [id])
  localizationId Int           @unique @map("localization_id")
  user           Users         @relation(fields: [userId], references: [id])
  userId         Int           @unique @map("user_id")

  @@map("warnings")
}

enum PROBLEM_TYPE {
  LACK_OF_ENERGY
  SANITATION
  INFRASTRUCTURE
  RISK_AREA
  OTHERS
}

model Problems {
  id          Int          @id @default(autoincrement())
  uuid        String       @unique() @default(uuid()) @db.Uuid()
  name        String       @db.VarChar(50)
  address     String       @db.VarChar(255)
  description String       @db.VarChar(255)
  longitude   Decimal      @db.Decimal()
  latitude    Decimal      @db.Decimal()
  photo       String?      @db.VarChar(255)
  problemType PROBLEM_TYPE @map("problem_type")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt() @map("updated_at")
  Rating      Rating[]

  @@map("problems")
}

enum DEFAULT_NAME_RATING {
  LIKE
  DISLIKE
}

model Rating {
  id        Int                 @id @default(autoincrement())
  name      DEFAULT_NAME_RATING @map("name_rating")
  problem   Problems            @relation(fields: [problemId], references: [id])
  problemId Int                 @map("problem_id")
  user      Users               @relation(fields: [userId], references: [id])
  userId    Int                 @map("user_id")

  @@map("ratings")
}
